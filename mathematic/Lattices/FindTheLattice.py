from Crypto.Util.number import long_to_bytes


# with sage math
'''
def decrypt(q, h, f, g, e):
    a = (f*e) % q
    m = (a*pow(f, -1, g)) % g
    return m

q = 7638232120454925879231554234011842347641017888219021175304217358715878636183252433454896490677496516149889316745664606749499241420160898019203925115292257
h = 2163268902194560093843693572170199707501787797497998463462129592239973581462651622978282637513865274199374452805292639586264791317439029535926401109074800
e = 5605696495253720664142881956908624307570671858477482119657436163663663844731169035682344974286379049123733356009125671924280312532755241162267269123486523

B = matrix(ZZ, [
        [1, h],
        [0, q]
    ])
L = B.LLL()
print(L)
g = L[0][1]
f_1 = h * pow(g, -1, q)
f = pow(f_1, -1, q)
print(f)
m = decrypt(q, h, f, g, e)
print(m)
'''

m = 2681090278518926103596876336530260209472667687146599413889678415962493
m = long_to_bytes(m)
print(m)
