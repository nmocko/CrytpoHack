# with usage of sagemath

from math import floor, sqrt
from sage.cpython.string import bytes_to_str
from Crypto.Util.number import long_to_bytes


def find_invpow(x, n):
    """Finds the integer component of the n'th root of x,
    an integer such that y ** n <= x < (y + 1) ** n.
    """
    high = 1
    while high ** n < x:
        high *= 2
    low = high // 2
    while low < high:
        mid = (low + high) // 2
        if low < mid and mid ** n < x:
            low = mid
        elif high > mid and mid ** n > x:
            high = mid
        else:
            return mid
    return mid + 1


N = 383347712330877040452238619329524841763392526146840572232926924642094891453979246383798913394114305368360426867021623649667024217266529000859703542590316063318592391925062014229671423777796679798747131250552455356061834719512365575593221216339005132464338847195248627639623487124025890693416305788160905762011825079336880567461033322240015771102929696350161937950387427696385850443727777996483584464610046380722736790790188061964311222153985614287276995741553706506834906746892708903948496564047090014307484054609862129530262108669567834726352078060081889712109412073731026030466300060341737504223822014714056413752165841749368159510588178604096191956750941078391415634472219765129561622344109769892244712668402761549412177892054051266761597330660545704317210567759828757156904778495608968785747998059857467440128156068391746919684258227682866083662345263659558066864109212457286114506228470930775092735385388316268663664139056183180238043386636254075940621543717531670995823417070666005930452836389812129462051771646048498397195157405386923446893886593048680984896989809135802276892911038588008701926729269812453226891776546037663583893625479252643042517196958990266376741676514631089466493864064316127648074609662749196545969926051
e = 65537
c = 98280456757136766244944891987028935843441533415613592591358482906016439563076150526116369842213103333480506705993633901994107281890187248495507270868621384652207697607019899166492132408348789252555196428608661320671877412710489782358282011364127799563335562917707783563681920786994453004763755404510541574502176243896756839917991848428091594919111448023948527766368304503100650379914153058191140072528095898576018893829830104362124927140555107994114143042266758709328068902664037870075742542194318059191313468675939426810988239079424823495317464035252325521917592045198152643533223015952702649249494753395100973534541766285551891859649320371178562200252228779395393974169736998523394598517174182142007480526603025578004665936854657294541338697513521007818552254811797566860763442604365744596444735991732790926343720102293453429936734206246109968817158815749927063561835274636195149702317415680401987150336994583752062565237605953153790371155918439941193401473271753038180560129784192800351649724465553733201451581525173536731674524145027931923204961274369826379325051601238308635192540223484055096203293400419816024111797903442864181965959247745006822690967920957905188441550106930799896292835287867403979631824085790047851383294389
sqrt_n = find_invpow(N, 2)
X = floor(find_invpow(N, 7) * (1 / (2 * sqrt(2)))) // 10

L = [[0 for _ in range(9)] for _ in range(9)]
L[0][0] = N ** 4
L[1][0] = (N ** 3) * sqrt_n;
L[1][1] = (N ** 3) * X
L[2][0] = (N ** 2) * (sqrt_n ** 2);
L[2][1] = (N ** 2) * 2 * sqrt_n * X;
L[2][2] = (N ** 2) * (X ** 2)
L[3][0] = N * (sqrt_n ** 3);
L[3][1] = 3 * N * (sqrt_n ** 2) * X;
L[3][2] = 3 * N * sqrt_n * (X ** 2);
L[3][3] = N * (X ** 3)
v = [sqrt_n ** 4, 4 * (sqrt_n ** 3) * X, 6 * (sqrt_n ** 2) * (X ** 2), 4 * sqrt_n * (X ** 3), X ** 4]
shift = 0
multiple = 1
for i in range(4, 9):
    for j in range(5):
        L[i][j + shift] = v[j] * multiple
    shift += 1
    multiple *= X

A = matrix(L
           )

L = A.LLL()

w = copy(L[0])
multiple = 1
for i in range(9):
    w[i] = w[i] // multiple
    multiple *= X

print('found vector', w)

delta = solve(
    w[8] * x ^ 8 + w[7] * x ^ 7 + w[6] * x ^ 6 + w[5] * x ^ 5 + w[4] * x ^ 4 + w[3] * x ^ 3 + w[2] * x ^ 2 + w[
        1] * x ^ 1 + w[0] * x ^ 0, x)
print('found solutions', delta)
p = sqrt_n + delta[0].rhs()
q = sqrt_n + delta[1].rhs()
print(f'p = {p}')
print(f'q = {q}')

phi = (p - 1) * (q - 1)
d = pow(e, -1, phi)
m = pow(c, d, N)
print(f'message = {m}')
print(long_to_bytes(m))